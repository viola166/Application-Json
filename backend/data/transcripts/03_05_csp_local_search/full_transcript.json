{
  "text": " So in today's unit so far we didn't connect constraint satisfaction problem solving to local search and this is something that we want to do now and we do it just in a series of exercises where you can think about and then I will quickly present the solution and first of all let's try to find a local sort formulation of a general CSP so the general local search approach that we did for let's say her climbing or beam search or whatever so you remember that for this kind of local search we need to define three things the first one is a state space then the neighborhood definition and the objective function and the question now is yeah well how can you formulate this general CSPS we formulated this today with respect to these three elements so what is this state space in a general CSP problem that we try to solve let's say with her climbing or another local search algorithm what is the definition of neighborhood in context of a general CSP and what is an objective function for a general CSP so think about it I will wait a few seconds because stop the video if you want to look back in the old slides or try to write something down so how would we formulate a general CSP in terms of these three elements that's trans for stopping the video okay so you remember a state state is a possible solution so a state space must be the space of all complete variable assignments as a state already is a possible solution and not something that is on the way of becoming a solution or whatever we only can have complete variable assignments so partial assignments are not used here so we look at states and each state is a complete assignment of variables for all variables in the CSP and then the neighbors are obtained by changing the assignment of one arbitrary variable so let's say we have 10 variables and the neighborhood is then or the possible other values of all the other variables depending on the domain of the variables of course and this means we have one neighbor for each variable and each value in the domain of the variable I think this is pretty obvious and now the objective function that is a value of one state so we have a complete variable assignment and we can just say okay the objective function is a number of constraints that are satisfied in this state and the number is very high if we have a very good solution it is equal to the number of constraints if we found a complete solution otherwise if they are still violations it is a number of constraints minus the number of violations and this is a completely different thing that is not not really taken into account in the backtracking search so in backtracking search we work with partial assignments and as soon as we find one violation we stop exploring that branch of the third space and backtracking search is only really good for finding complete solution but here in local search we are also able to find not perfect solutions but solutions that violate only a few constraints so to speak so let's let's take this this game a bit further how can we apply the terms that we defined for genetic algorithms now for this general CSP problem so we need to define what are the genes what are chromosomes so the genes are the positive values of the chromosomes the fitness value of individuals and the mutation operation and this should be illustrated by a small example so again think about that I think about the general CSP as we defined it looked at it today what might the terms genes chromosomes fitness of individuals and mutation operation might mean how can there be described and defined for general CSP I wait a few seconds before I present the solution you might want to stop the video last chance to do so okay the genes of course are the domain elements of all variables so this is a set of possible values that the variables can have and then the chromosomes are the variable assignments so an individual again is a complete variable assignment and the fitness again is a number of constraints that are satisfied this is the same as the objective function and the mutation operation now is changing random gene or random position in the chromosome with a possible gene value and this can be directly applied to the examples from the local search slides a Queen's graph coloring both are constraint satisfaction problems as we've already seen today and they will then be yeah a soft in a very comparable way before we look at now the general generalized algorithm of solving constraint satisfaction problems together with these consistency concepts by local search let's look at one more one more question what can we conclude if the local search finds a globally optimal solution so the objective function of fitness function is equals the number of constraints and what does mean if we find an only locally optimal solution which is yeah the name says locally optimal but does not really find a globally optimal solution what can we conclude in these two cases already told you that it's different from backtracking search there are no locally optimal solutions because we just stop exploring as soon as we find one violation here we can have this kind of local optimist solution but what does it tell us we can recognize a locally optimal solution this is a little bit different from some of the other local search problems that we looked at so for example traveling salesman problem you do not know if there still is a better solution until you really explored everything here if you find a solution where the fitness equals the number of constraints you know that you found an optimal solution there might be more optimal solutions but none of them is better in any way so here we know that we have that we stuck in a local optimum and what does it tell us last chance to stop the video to think about it okay for a globally optimal solution we know that by the definition or the constraints are satisfied and we found a solution and we know this CSB is consistent because we have found a solution and therefore it is consistent if we have an only locally optimal solution we know that some constraints are violated but we do not know if there is a better solution so the CSB might be inconsistent but that might also the case that we just stuck into some kind of local optimum and the next valley already will lead us to a globally optimal solution and therefore we just cannot conclude anything in this case we do not know if there is a better solution if there is a solution at all but of course we might say okay a solution that only violates two constraints or so is already good enough for us this is then often called soft constraints or soft constraint problem solving and again this is not possible for backtracking search but it is true again here you have to search the entire search space to be sure that there is no better solution but applying the consistency definitions and algorithms that establish consistency in the way that we looked at today can make this problem easier so if we want to combine consistency establishing algorithms and local search we could stick to this procedure here we can say okay we have our constraints at a section problem we do this kind of constraint propagation making CSP locally consistent node consistent our consistent perhaps even more we might find it already inconsistent then then we're done with can say okay there is not a solution but perhaps we say okay we know it's inconsistent but still we want to find a good solution so we could perform local search then but we would still of course benefit from the outcome of making it node and are consistent because these algorithms reduce the size of the domains and therefore our local search algorithms will not run into dead ends will omit perhaps some local optimal and so on so the search space becomes smaller and then in the end we can say okay we we found an optimal solution or not if not we might have found a suboptimal solution which still is okay for us but we would not know if there is a better solution okay good last next and last section will be summary of today's content and that's it for local search",
  "segments": [
    {
      "id": 0,
      "seek": 0,
      "start": 0.0,
      "end": 5.8,
      "text": " So in today's unit so far we didn't connect constraint satisfaction problem",
      "tokens": [
        50364,
        407,
        294,
        965,
        311,
        4985,
        370,
        1400,
        321,
        994,
        380,
        1745,
        25534,
        18715,
        1154,
        50654
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18203792307111952,
      "compression_ratio": 1.5435897435897437,
      "no_speech_prob": 0.1583574116230011
    },
    {
      "id": 1,
      "seek": 0,
      "start": 5.8,
      "end": 9.88,
      "text": " solving to local search and this is something that we want to do now and we do",
      "tokens": [
        50654,
        12606,
        281,
        2654,
        3164,
        293,
        341,
        307,
        746,
        300,
        321,
        528,
        281,
        360,
        586,
        293,
        321,
        360,
        50858
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18203792307111952,
      "compression_ratio": 1.5435897435897437,
      "no_speech_prob": 0.1583574116230011
    },
    {
      "id": 2,
      "seek": 0,
      "start": 9.88,
      "end": 14.26,
      "text": " it just in a series of exercises where you can think about and then I will",
      "tokens": [
        50858,
        309,
        445,
        294,
        257,
        2638,
        295,
        11900,
        689,
        291,
        393,
        519,
        466,
        293,
        550,
        286,
        486,
        51077
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18203792307111952,
      "compression_ratio": 1.5435897435897437,
      "no_speech_prob": 0.1583574116230011
    },
    {
      "id": 3,
      "seek": 0,
      "start": 14.26,
      "end": 24.080000000000002,
      "text": " quickly present the solution and first of all let's try to find a local",
      "tokens": [
        51077,
        2661,
        1974,
        264,
        3827,
        293,
        700,
        295,
        439,
        718,
        311,
        853,
        281,
        915,
        257,
        2654,
        51568
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18203792307111952,
      "compression_ratio": 1.5435897435897437,
      "no_speech_prob": 0.1583574116230011
    },
    {
      "id": 4,
      "seek": 2408,
      "start": 24.08,
      "end": 30.04,
      "text": " sort formulation of a general CSP so the general local search approach that we",
      "tokens": [
        50364,
        1333,
        37642,
        295,
        257,
        2674,
        9460,
        47,
        370,
        264,
        2674,
        2654,
        3164,
        3109,
        300,
        321,
        50662
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21256797258244003,
      "compression_ratio": 1.7387387387387387,
      "no_speech_prob": 0.028046080842614174
    },
    {
      "id": 5,
      "seek": 2408,
      "start": 30.04,
      "end": 36.08,
      "text": " did for let's say her climbing or beam search or whatever so you remember",
      "tokens": [
        50662,
        630,
        337,
        718,
        311,
        584,
        720,
        14780,
        420,
        14269,
        3164,
        420,
        2035,
        370,
        291,
        1604,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21256797258244003,
      "compression_ratio": 1.7387387387387387,
      "no_speech_prob": 0.028046080842614174
    },
    {
      "id": 6,
      "seek": 2408,
      "start": 36.08,
      "end": 40.04,
      "text": " that for this kind of local search we need to define three things the first one",
      "tokens": [
        50964,
        300,
        337,
        341,
        733,
        295,
        2654,
        3164,
        321,
        643,
        281,
        6964,
        1045,
        721,
        264,
        700,
        472,
        51162
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21256797258244003,
      "compression_ratio": 1.7387387387387387,
      "no_speech_prob": 0.028046080842614174
    },
    {
      "id": 7,
      "seek": 2408,
      "start": 40.04,
      "end": 45.56,
      "text": " is a state space then the neighborhood definition and the objective function",
      "tokens": [
        51162,
        307,
        257,
        1785,
        1901,
        550,
        264,
        7630,
        7123,
        293,
        264,
        10024,
        2445,
        51438
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21256797258244003,
      "compression_ratio": 1.7387387387387387,
      "no_speech_prob": 0.028046080842614174
    },
    {
      "id": 8,
      "seek": 2408,
      "start": 45.56,
      "end": 53.12,
      "text": " and the question now is yeah well how can you formulate this general CSPS we",
      "tokens": [
        51438,
        293,
        264,
        1168,
        586,
        307,
        1338,
        731,
        577,
        393,
        291,
        47881,
        341,
        2674,
        9460,
        6273,
        321,
        51816
      ],
      "temperature": 0.0,
      "avg_logprob": -0.21256797258244003,
      "compression_ratio": 1.7387387387387387,
      "no_speech_prob": 0.028046080842614174
    },
    {
      "id": 9,
      "seek": 5312,
      "start": 53.12,
      "end": 60.239999999999995,
      "text": " formulated this today with respect to these three elements so what is this",
      "tokens": [
        50364,
        48936,
        341,
        965,
        365,
        3104,
        281,
        613,
        1045,
        4959,
        370,
        437,
        307,
        341,
        50720
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17082708935404933,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.007214958313852549
    },
    {
      "id": 10,
      "seek": 5312,
      "start": 60.239999999999995,
      "end": 65.3,
      "text": " state space in a general CSP problem that we try to solve let's say with her",
      "tokens": [
        50720,
        1785,
        1901,
        294,
        257,
        2674,
        9460,
        47,
        1154,
        300,
        321,
        853,
        281,
        5039,
        718,
        311,
        584,
        365,
        720,
        50973
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17082708935404933,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.007214958313852549
    },
    {
      "id": 11,
      "seek": 5312,
      "start": 65.3,
      "end": 69.8,
      "text": " climbing or another local search algorithm what is the definition of",
      "tokens": [
        50973,
        14780,
        420,
        1071,
        2654,
        3164,
        9284,
        437,
        307,
        264,
        7123,
        295,
        51198
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17082708935404933,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.007214958313852549
    },
    {
      "id": 12,
      "seek": 5312,
      "start": 69.8,
      "end": 74.56,
      "text": " neighborhood in context of a general CSP and what is an objective function",
      "tokens": [
        51198,
        7630,
        294,
        4319,
        295,
        257,
        2674,
        9460,
        47,
        293,
        437,
        307,
        364,
        10024,
        2445,
        51436
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17082708935404933,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.007214958313852549
    },
    {
      "id": 13,
      "seek": 5312,
      "start": 74.56,
      "end": 80.08,
      "text": " for a general CSP so think about it I will wait a few seconds because stop the",
      "tokens": [
        51436,
        337,
        257,
        2674,
        9460,
        47,
        370,
        519,
        466,
        309,
        286,
        486,
        1699,
        257,
        1326,
        3949,
        570,
        1590,
        264,
        51712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17082708935404933,
      "compression_ratio": 1.6622222222222223,
      "no_speech_prob": 0.007214958313852549
    },
    {
      "id": 14,
      "seek": 8008,
      "start": 80.08,
      "end": 87.24,
      "text": " video if you want to look back in the old slides or try to write something",
      "tokens": [
        50364,
        960,
        498,
        291,
        528,
        281,
        574,
        646,
        294,
        264,
        1331,
        9788,
        420,
        853,
        281,
        2464,
        746,
        50722
      ],
      "temperature": 0.0,
      "avg_logprob": -0.28660150936671663,
      "compression_ratio": 1.4615384615384615,
      "no_speech_prob": 0.006145277991890907
    },
    {
      "id": 15,
      "seek": 8008,
      "start": 87.24,
      "end": 95.92,
      "text": " down so how would we formulate a general CSP in terms of these three elements",
      "tokens": [
        50722,
        760,
        370,
        577,
        576,
        321,
        47881,
        257,
        2674,
        9460,
        47,
        294,
        2115,
        295,
        613,
        1045,
        4959,
        51156
      ],
      "temperature": 0.0,
      "avg_logprob": -0.28660150936671663,
      "compression_ratio": 1.4615384615384615,
      "no_speech_prob": 0.006145277991890907
    },
    {
      "id": 16,
      "seek": 8008,
      "start": 100.64,
      "end": 108.32,
      "text": " that's trans for stopping the video okay so you remember a state state is a",
      "tokens": [
        51392,
        300,
        311,
        1145,
        337,
        12767,
        264,
        960,
        1392,
        370,
        291,
        1604,
        257,
        1785,
        1785,
        307,
        257,
        51776
      ],
      "temperature": 0.0,
      "avg_logprob": -0.28660150936671663,
      "compression_ratio": 1.4615384615384615,
      "no_speech_prob": 0.006145277991890907
    },
    {
      "id": 17,
      "seek": 10832,
      "start": 108.32,
      "end": 114.72,
      "text": " possible solution so a state space must be the space of all complete",
      "tokens": [
        50364,
        1944,
        3827,
        370,
        257,
        1785,
        1901,
        1633,
        312,
        264,
        1901,
        295,
        439,
        3566,
        50684
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16396149610861754,
      "compression_ratio": 2.0274725274725274,
      "no_speech_prob": 0.003798262681812048
    },
    {
      "id": 18,
      "seek": 10832,
      "start": 114.72,
      "end": 119.8,
      "text": " variable assignments as a state already is a possible solution and not",
      "tokens": [
        50684,
        7006,
        22546,
        382,
        257,
        1785,
        1217,
        307,
        257,
        1944,
        3827,
        293,
        406,
        50938
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16396149610861754,
      "compression_ratio": 2.0274725274725274,
      "no_speech_prob": 0.003798262681812048
    },
    {
      "id": 19,
      "seek": 10832,
      "start": 119.8,
      "end": 124.91999999999999,
      "text": " something that is on the way of becoming a solution or whatever we only can",
      "tokens": [
        50938,
        746,
        300,
        307,
        322,
        264,
        636,
        295,
        5617,
        257,
        3827,
        420,
        2035,
        321,
        787,
        393,
        51194
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16396149610861754,
      "compression_ratio": 2.0274725274725274,
      "no_speech_prob": 0.003798262681812048
    },
    {
      "id": 20,
      "seek": 10832,
      "start": 124.91999999999999,
      "end": 130.6,
      "text": " have complete variable assignments so partial assignments are not used here",
      "tokens": [
        51194,
        362,
        3566,
        7006,
        22546,
        370,
        14641,
        22546,
        366,
        406,
        1143,
        510,
        51478
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16396149610861754,
      "compression_ratio": 2.0274725274725274,
      "no_speech_prob": 0.003798262681812048
    },
    {
      "id": 21,
      "seek": 10832,
      "start": 130.6,
      "end": 136.12,
      "text": " so we look at states and each state is a complete assignment of variables for",
      "tokens": [
        51478,
        370,
        321,
        574,
        412,
        4368,
        293,
        1184,
        1785,
        307,
        257,
        3566,
        15187,
        295,
        9102,
        337,
        51754
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16396149610861754,
      "compression_ratio": 2.0274725274725274,
      "no_speech_prob": 0.003798262681812048
    },
    {
      "id": 22,
      "seek": 13612,
      "start": 136.12,
      "end": 145.12,
      "text": " all variables in the CSP and then the neighbors are obtained by changing the",
      "tokens": [
        50364,
        439,
        9102,
        294,
        264,
        9460,
        47,
        293,
        550,
        264,
        12512,
        366,
        14879,
        538,
        4473,
        264,
        50814
      ],
      "temperature": 0.0,
      "avg_logprob": -0.22854055142870136,
      "compression_ratio": 1.5890410958904109,
      "no_speech_prob": 0.007199517916887999
    },
    {
      "id": 23,
      "seek": 13612,
      "start": 145.12,
      "end": 150.68,
      "text": " assignment of one arbitrary variable so let's say we have 10 variables and the",
      "tokens": [
        50814,
        15187,
        295,
        472,
        23211,
        7006,
        370,
        718,
        311,
        584,
        321,
        362,
        1266,
        9102,
        293,
        264,
        51092
      ],
      "temperature": 0.0,
      "avg_logprob": -0.22854055142870136,
      "compression_ratio": 1.5890410958904109,
      "no_speech_prob": 0.007199517916887999
    },
    {
      "id": 24,
      "seek": 13612,
      "start": 150.68,
      "end": 159.52,
      "text": " neighborhood is then or the possible other values of all the other variables",
      "tokens": [
        51092,
        7630,
        307,
        550,
        420,
        264,
        1944,
        661,
        4190,
        295,
        439,
        264,
        661,
        9102,
        51534
      ],
      "temperature": 0.0,
      "avg_logprob": -0.22854055142870136,
      "compression_ratio": 1.5890410958904109,
      "no_speech_prob": 0.007199517916887999
    },
    {
      "id": 25,
      "seek": 15952,
      "start": 160.12,
      "end": 168.4,
      "text": " depending on the domain of the variables of course and this means we have one",
      "tokens": [
        50394,
        5413,
        322,
        264,
        9274,
        295,
        264,
        9102,
        295,
        1164,
        293,
        341,
        1355,
        321,
        362,
        472,
        50808
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16197201865059987,
      "compression_ratio": 1.7976878612716762,
      "no_speech_prob": 0.022776028141379356
    },
    {
      "id": 26,
      "seek": 15952,
      "start": 168.4,
      "end": 174.8,
      "text": " neighbor for each variable and each value in the domain of the variable I think",
      "tokens": [
        50808,
        5987,
        337,
        1184,
        7006,
        293,
        1184,
        2158,
        294,
        264,
        9274,
        295,
        264,
        7006,
        286,
        519,
        51128
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16197201865059987,
      "compression_ratio": 1.7976878612716762,
      "no_speech_prob": 0.022776028141379356
    },
    {
      "id": 27,
      "seek": 15952,
      "start": 174.8,
      "end": 181.04000000000002,
      "text": " this is pretty obvious and now the objective function that is a value of one",
      "tokens": [
        51128,
        341,
        307,
        1238,
        6322,
        293,
        586,
        264,
        10024,
        2445,
        300,
        307,
        257,
        2158,
        295,
        472,
        51440
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16197201865059987,
      "compression_ratio": 1.7976878612716762,
      "no_speech_prob": 0.022776028141379356
    },
    {
      "id": 28,
      "seek": 15952,
      "start": 181.04000000000002,
      "end": 186.04000000000002,
      "text": " state so we have a complete variable assignment and we can just say okay the",
      "tokens": [
        51440,
        1785,
        370,
        321,
        362,
        257,
        3566,
        7006,
        15187,
        293,
        321,
        393,
        445,
        584,
        1392,
        264,
        51690
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16197201865059987,
      "compression_ratio": 1.7976878612716762,
      "no_speech_prob": 0.022776028141379356
    },
    {
      "id": 29,
      "seek": 18604,
      "start": 186.04,
      "end": 190.04,
      "text": " objective function is a number of constraints that are satisfied in this",
      "tokens": [
        50364,
        10024,
        2445,
        307,
        257,
        1230,
        295,
        18491,
        300,
        366,
        11239,
        294,
        341,
        50564
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17981917822538918,
      "compression_ratio": 1.980891719745223,
      "no_speech_prob": 0.0036837768275290728
    },
    {
      "id": 30,
      "seek": 18604,
      "start": 190.04,
      "end": 200.0,
      "text": " state and the number is very high if we have a very good solution it is equal to",
      "tokens": [
        50564,
        1785,
        293,
        264,
        1230,
        307,
        588,
        1090,
        498,
        321,
        362,
        257,
        588,
        665,
        3827,
        309,
        307,
        2681,
        281,
        51062
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17981917822538918,
      "compression_ratio": 1.980891719745223,
      "no_speech_prob": 0.0036837768275290728
    },
    {
      "id": 31,
      "seek": 18604,
      "start": 200.0,
      "end": 205.0,
      "text": " the number of constraints if we found a complete solution otherwise if they are",
      "tokens": [
        51062,
        264,
        1230,
        295,
        18491,
        498,
        321,
        1352,
        257,
        3566,
        3827,
        5911,
        498,
        436,
        366,
        51312
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17981917822538918,
      "compression_ratio": 1.980891719745223,
      "no_speech_prob": 0.0036837768275290728
    },
    {
      "id": 32,
      "seek": 18604,
      "start": 205.0,
      "end": 209.92,
      "text": " still violations it is a number of constraints minus the number of violations",
      "tokens": [
        51312,
        920,
        30405,
        309,
        307,
        257,
        1230,
        295,
        18491,
        3175,
        264,
        1230,
        295,
        30405,
        51558
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17981917822538918,
      "compression_ratio": 1.980891719745223,
      "no_speech_prob": 0.0036837768275290728
    },
    {
      "id": 33,
      "seek": 20992,
      "start": 209.92,
      "end": 218.56,
      "text": " and this is a completely different thing that is not not really taken into",
      "tokens": [
        50364,
        293,
        341,
        307,
        257,
        2584,
        819,
        551,
        300,
        307,
        406,
        406,
        534,
        2726,
        666,
        50796
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17232260496720023,
      "compression_ratio": 1.7660818713450293,
      "no_speech_prob": 0.015581482090055943
    },
    {
      "id": 34,
      "seek": 20992,
      "start": 218.56,
      "end": 223.72,
      "text": " account in the backtracking search so in backtracking search we work with",
      "tokens": [
        50796,
        2696,
        294,
        264,
        646,
        6903,
        14134,
        3164,
        370,
        294,
        646,
        6903,
        14134,
        3164,
        321,
        589,
        365,
        51054
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17232260496720023,
      "compression_ratio": 1.7660818713450293,
      "no_speech_prob": 0.015581482090055943
    },
    {
      "id": 35,
      "seek": 20992,
      "start": 223.72,
      "end": 230.07999999999998,
      "text": " partial assignments and as soon as we find one violation we stop exploring that",
      "tokens": [
        51054,
        14641,
        22546,
        293,
        382,
        2321,
        382,
        321,
        915,
        472,
        22840,
        321,
        1590,
        12736,
        300,
        51372
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17232260496720023,
      "compression_ratio": 1.7660818713450293,
      "no_speech_prob": 0.015581482090055943
    },
    {
      "id": 36,
      "seek": 20992,
      "start": 230.07999999999998,
      "end": 236.88,
      "text": " branch of the third space and backtracking search is only really good for",
      "tokens": [
        51372,
        9819,
        295,
        264,
        2636,
        1901,
        293,
        646,
        6903,
        14134,
        3164,
        307,
        787,
        534,
        665,
        337,
        51712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17232260496720023,
      "compression_ratio": 1.7660818713450293,
      "no_speech_prob": 0.015581482090055943
    },
    {
      "id": 37,
      "seek": 23688,
      "start": 236.88,
      "end": 242.4,
      "text": " finding complete solution but here in local search we are also able to find",
      "tokens": [
        50364,
        5006,
        3566,
        3827,
        457,
        510,
        294,
        2654,
        3164,
        321,
        366,
        611,
        1075,
        281,
        915,
        50640
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15236592292785645,
      "compression_ratio": 1.582010582010582,
      "no_speech_prob": 0.007068985607475042
    },
    {
      "id": 38,
      "seek": 23688,
      "start": 242.4,
      "end": 248.16,
      "text": " not perfect solutions but solutions that violate only a few constraints so to",
      "tokens": [
        50640,
        406,
        2176,
        6547,
        457,
        6547,
        300,
        37478,
        787,
        257,
        1326,
        18491,
        370,
        281,
        50928
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15236592292785645,
      "compression_ratio": 1.582010582010582,
      "no_speech_prob": 0.007068985607475042
    },
    {
      "id": 39,
      "seek": 23688,
      "start": 248.16,
      "end": 258.52,
      "text": " speak so let's let's take this this game a bit further how can we apply the",
      "tokens": [
        50928,
        1710,
        370,
        718,
        311,
        718,
        311,
        747,
        341,
        341,
        1216,
        257,
        857,
        3052,
        577,
        393,
        321,
        3079,
        264,
        51446
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15236592292785645,
      "compression_ratio": 1.582010582010582,
      "no_speech_prob": 0.007068985607475042
    },
    {
      "id": 40,
      "seek": 23688,
      "start": 258.52,
      "end": 263.84,
      "text": " terms that we defined for genetic algorithms now for this general CSP",
      "tokens": [
        51446,
        2115,
        300,
        321,
        7642,
        337,
        12462,
        14642,
        586,
        337,
        341,
        2674,
        9460,
        47,
        51712
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15236592292785645,
      "compression_ratio": 1.582010582010582,
      "no_speech_prob": 0.007068985607475042
    },
    {
      "id": 41,
      "seek": 26384,
      "start": 263.84,
      "end": 271.28,
      "text": " problem so we need to define what are the genes what are chromosomes so the",
      "tokens": [
        50364,
        1154,
        370,
        321,
        643,
        281,
        6964,
        437,
        366,
        264,
        14424,
        437,
        366,
        45228,
        370,
        264,
        50736
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17408084869384766,
      "compression_ratio": 1.7109826589595376,
      "no_speech_prob": 0.024198463186621666
    },
    {
      "id": 42,
      "seek": 26384,
      "start": 271.28,
      "end": 276.0,
      "text": " genes are the positive values of the chromosomes the fitness value of",
      "tokens": [
        50736,
        14424,
        366,
        264,
        3353,
        4190,
        295,
        264,
        45228,
        264,
        15303,
        2158,
        295,
        50972
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17408084869384766,
      "compression_ratio": 1.7109826589595376,
      "no_speech_prob": 0.024198463186621666
    },
    {
      "id": 43,
      "seek": 26384,
      "start": 276.0,
      "end": 281.96,
      "text": " individuals and the mutation operation and this should be illustrated by a",
      "tokens": [
        50972,
        5346,
        293,
        264,
        27960,
        6916,
        293,
        341,
        820,
        312,
        33875,
        538,
        257,
        51270
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17408084869384766,
      "compression_ratio": 1.7109826589595376,
      "no_speech_prob": 0.024198463186621666
    },
    {
      "id": 44,
      "seek": 26384,
      "start": 281.96,
      "end": 287.15999999999997,
      "text": " small example so again think about that I think about the general CSP as we",
      "tokens": [
        51270,
        1359,
        1365,
        370,
        797,
        519,
        466,
        300,
        286,
        519,
        466,
        264,
        2674,
        9460,
        47,
        382,
        321,
        51530
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17408084869384766,
      "compression_ratio": 1.7109826589595376,
      "no_speech_prob": 0.024198463186621666
    },
    {
      "id": 45,
      "seek": 28716,
      "start": 287.16,
      "end": 294.52000000000004,
      "text": " defined it looked at it today what might the terms genes chromosomes",
      "tokens": [
        50364,
        7642,
        309,
        2956,
        412,
        309,
        965,
        437,
        1062,
        264,
        2115,
        14424,
        45228,
        50732
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24832497040430704,
      "compression_ratio": 1.4701986754966887,
      "no_speech_prob": 0.0022822159808129072
    },
    {
      "id": 46,
      "seek": 28716,
      "start": 294.52000000000004,
      "end": 299.16,
      "text": " fitness of individuals and mutation operation might mean how can there be",
      "tokens": [
        50732,
        15303,
        295,
        5346,
        293,
        27960,
        6916,
        1062,
        914,
        577,
        393,
        456,
        312,
        50964
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24832497040430704,
      "compression_ratio": 1.4701986754966887,
      "no_speech_prob": 0.0022822159808129072
    },
    {
      "id": 47,
      "seek": 28716,
      "start": 299.16,
      "end": 307.6,
      "text": " described and defined for general CSP I wait a few seconds before I present the",
      "tokens": [
        50964,
        7619,
        293,
        7642,
        337,
        2674,
        9460,
        47,
        286,
        1699,
        257,
        1326,
        3949,
        949,
        286,
        1974,
        264,
        51386
      ],
      "temperature": 0.0,
      "avg_logprob": -0.24832497040430704,
      "compression_ratio": 1.4701986754966887,
      "no_speech_prob": 0.0022822159808129072
    },
    {
      "id": 48,
      "seek": 30760,
      "start": 307.6,
      "end": 318.84000000000003,
      "text": " solution you might want to stop the video last chance to do so okay the genes",
      "tokens": [
        50364,
        3827,
        291,
        1062,
        528,
        281,
        1590,
        264,
        960,
        1036,
        2931,
        281,
        360,
        370,
        1392,
        264,
        14424,
        50926
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17272136394794171,
      "compression_ratio": 1.7719298245614035,
      "no_speech_prob": 0.01938832923769951
    },
    {
      "id": 49,
      "seek": 30760,
      "start": 318.84000000000003,
      "end": 323.36,
      "text": " of course are the domain elements of all variables so this is a set of",
      "tokens": [
        50926,
        295,
        1164,
        366,
        264,
        9274,
        4959,
        295,
        439,
        9102,
        370,
        341,
        307,
        257,
        992,
        295,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17272136394794171,
      "compression_ratio": 1.7719298245614035,
      "no_speech_prob": 0.01938832923769951
    },
    {
      "id": 50,
      "seek": 30760,
      "start": 323.36,
      "end": 328.88,
      "text": " possible values that the variables can have and then the chromosomes are the",
      "tokens": [
        51152,
        1944,
        4190,
        300,
        264,
        9102,
        393,
        362,
        293,
        550,
        264,
        45228,
        366,
        264,
        51428
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17272136394794171,
      "compression_ratio": 1.7719298245614035,
      "no_speech_prob": 0.01938832923769951
    },
    {
      "id": 51,
      "seek": 30760,
      "start": 328.88,
      "end": 334.04,
      "text": " variable assignments so an individual again is a complete variable assignment",
      "tokens": [
        51428,
        7006,
        22546,
        370,
        364,
        2609,
        797,
        307,
        257,
        3566,
        7006,
        15187,
        51686
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17272136394794171,
      "compression_ratio": 1.7719298245614035,
      "no_speech_prob": 0.01938832923769951
    },
    {
      "id": 52,
      "seek": 33404,
      "start": 334.76000000000005,
      "end": 339.68,
      "text": " and the fitness again is a number of constraints that are satisfied this is",
      "tokens": [
        50400,
        293,
        264,
        15303,
        797,
        307,
        257,
        1230,
        295,
        18491,
        300,
        366,
        11239,
        341,
        307,
        50646
      ],
      "temperature": 0.0,
      "avg_logprob": -0.29276840596259396,
      "compression_ratio": 1.7174887892376682,
      "no_speech_prob": 0.002333281794562936
    },
    {
      "id": 53,
      "seek": 33404,
      "start": 339.68,
      "end": 345.16,
      "text": " the same as the objective function and the mutation operation now is changing",
      "tokens": [
        50646,
        264,
        912,
        382,
        264,
        10024,
        2445,
        293,
        264,
        27960,
        6916,
        586,
        307,
        4473,
        50920
      ],
      "temperature": 0.0,
      "avg_logprob": -0.29276840596259396,
      "compression_ratio": 1.7174887892376682,
      "no_speech_prob": 0.002333281794562936
    },
    {
      "id": 54,
      "seek": 33404,
      "start": 345.16,
      "end": 349.32000000000005,
      "text": " random gene or random position in the chromosome with a possible gene value and",
      "tokens": [
        50920,
        4974,
        12186,
        420,
        4974,
        2535,
        294,
        264,
        42896,
        365,
        257,
        1944,
        12186,
        2158,
        293,
        51128
      ],
      "temperature": 0.0,
      "avg_logprob": -0.29276840596259396,
      "compression_ratio": 1.7174887892376682,
      "no_speech_prob": 0.002333281794562936
    },
    {
      "id": 55,
      "seek": 33404,
      "start": 349.32000000000005,
      "end": 355.72,
      "text": " this can be directly applied to the examples from the local search slides a",
      "tokens": [
        51128,
        341,
        393,
        312,
        3838,
        6456,
        281,
        264,
        5110,
        490,
        264,
        2654,
        3164,
        9788,
        257,
        51448
      ],
      "temperature": 0.0,
      "avg_logprob": -0.29276840596259396,
      "compression_ratio": 1.7174887892376682,
      "no_speech_prob": 0.002333281794562936
    },
    {
      "id": 56,
      "seek": 33404,
      "start": 355.72,
      "end": 360.52000000000004,
      "text": " Queen's graph coloring both are constraint satisfaction problems as we've",
      "tokens": [
        51448,
        10077,
        311,
        4295,
        23198,
        1293,
        366,
        25534,
        18715,
        2740,
        382,
        321,
        600,
        51688
      ],
      "temperature": 0.0,
      "avg_logprob": -0.29276840596259396,
      "compression_ratio": 1.7174887892376682,
      "no_speech_prob": 0.002333281794562936
    },
    {
      "id": 57,
      "seek": 36052,
      "start": 360.52,
      "end": 370.68,
      "text": " already seen today and they will then be yeah a soft in a very comparable way",
      "tokens": [
        50364,
        1217,
        1612,
        965,
        293,
        436,
        486,
        550,
        312,
        1338,
        257,
        2787,
        294,
        257,
        588,
        25323,
        636,
        50872
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18910687969576928,
      "compression_ratio": 1.5989304812834224,
      "no_speech_prob": 0.0009129132959060371
    },
    {
      "id": 58,
      "seek": 36052,
      "start": 370.68,
      "end": 376.56,
      "text": " before we look at now the general generalized algorithm of solving",
      "tokens": [
        50872,
        949,
        321,
        574,
        412,
        586,
        264,
        2674,
        44498,
        9284,
        295,
        12606,
        51166
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18910687969576928,
      "compression_ratio": 1.5989304812834224,
      "no_speech_prob": 0.0009129132959060371
    },
    {
      "id": 59,
      "seek": 36052,
      "start": 376.56,
      "end": 381.56,
      "text": " constraint satisfaction problems together with these consistency concepts by",
      "tokens": [
        51166,
        25534,
        18715,
        2740,
        1214,
        365,
        613,
        14416,
        10392,
        538,
        51416
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18910687969576928,
      "compression_ratio": 1.5989304812834224,
      "no_speech_prob": 0.0009129132959060371
    },
    {
      "id": 60,
      "seek": 36052,
      "start": 381.56,
      "end": 388.08,
      "text": " local search let's look at one more one more question what can we conclude if",
      "tokens": [
        51416,
        2654,
        3164,
        718,
        311,
        574,
        412,
        472,
        544,
        472,
        544,
        1168,
        437,
        393,
        321,
        16886,
        498,
        51742
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18910687969576928,
      "compression_ratio": 1.5989304812834224,
      "no_speech_prob": 0.0009129132959060371
    },
    {
      "id": 61,
      "seek": 38808,
      "start": 388.08,
      "end": 394.28,
      "text": " the local search finds a globally optimal solution so the objective",
      "tokens": [
        50364,
        264,
        2654,
        3164,
        10704,
        257,
        18958,
        16252,
        3827,
        370,
        264,
        10024,
        50674
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16497302666688576,
      "compression_ratio": 1.879396984924623,
      "no_speech_prob": 0.00771286292001605
    },
    {
      "id": 62,
      "seek": 38808,
      "start": 394.28,
      "end": 398.8,
      "text": " function of fitness function is equals the number of constraints and what",
      "tokens": [
        50674,
        2445,
        295,
        15303,
        2445,
        307,
        6915,
        264,
        1230,
        295,
        18491,
        293,
        437,
        50900
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16497302666688576,
      "compression_ratio": 1.879396984924623,
      "no_speech_prob": 0.00771286292001605
    },
    {
      "id": 63,
      "seek": 38808,
      "start": 398.8,
      "end": 404.52,
      "text": " does mean if we find an only locally optimal solution which is yeah the name",
      "tokens": [
        50900,
        775,
        914,
        498,
        321,
        915,
        364,
        787,
        16143,
        16252,
        3827,
        597,
        307,
        1338,
        264,
        1315,
        51186
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16497302666688576,
      "compression_ratio": 1.879396984924623,
      "no_speech_prob": 0.00771286292001605
    },
    {
      "id": 64,
      "seek": 38808,
      "start": 404.52,
      "end": 409.2,
      "text": " says locally optimal but does not really find a globally optimal solution what",
      "tokens": [
        51186,
        1619,
        16143,
        16252,
        457,
        775,
        406,
        534,
        915,
        257,
        18958,
        16252,
        3827,
        437,
        51420
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16497302666688576,
      "compression_ratio": 1.879396984924623,
      "no_speech_prob": 0.00771286292001605
    },
    {
      "id": 65,
      "seek": 38808,
      "start": 409.2,
      "end": 413.76,
      "text": " can we conclude in these two cases already told you that it's different from",
      "tokens": [
        51420,
        393,
        321,
        16886,
        294,
        613,
        732,
        3331,
        1217,
        1907,
        291,
        300,
        309,
        311,
        819,
        490,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.16497302666688576,
      "compression_ratio": 1.879396984924623,
      "no_speech_prob": 0.00771286292001605
    },
    {
      "id": 66,
      "seek": 41376,
      "start": 413.76,
      "end": 418.08,
      "text": " backtracking search there are no locally optimal solutions because we just",
      "tokens": [
        50364,
        646,
        6903,
        14134,
        3164,
        456,
        366,
        572,
        16143,
        16252,
        6547,
        570,
        321,
        445,
        50580
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18537659242928747,
      "compression_ratio": 1.780373831775701,
      "no_speech_prob": 0.007449316326528788
    },
    {
      "id": 67,
      "seek": 41376,
      "start": 418.08,
      "end": 424.24,
      "text": " stop exploring as soon as we find one violation here we can have this kind of",
      "tokens": [
        50580,
        1590,
        12736,
        382,
        2321,
        382,
        321,
        915,
        472,
        22840,
        510,
        321,
        393,
        362,
        341,
        733,
        295,
        50888
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18537659242928747,
      "compression_ratio": 1.780373831775701,
      "no_speech_prob": 0.007449316326528788
    },
    {
      "id": 68,
      "seek": 41376,
      "start": 424.24,
      "end": 429.52,
      "text": " local optimist solution but what does it tell us we can recognize a locally",
      "tokens": [
        50888,
        2654,
        5028,
        468,
        3827,
        457,
        437,
        775,
        309,
        980,
        505,
        321,
        393,
        5521,
        257,
        16143,
        51152
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18537659242928747,
      "compression_ratio": 1.780373831775701,
      "no_speech_prob": 0.007449316326528788
    },
    {
      "id": 69,
      "seek": 41376,
      "start": 429.52,
      "end": 433.84,
      "text": " optimal solution this is a little bit different from some of the other local",
      "tokens": [
        51152,
        16252,
        3827,
        341,
        307,
        257,
        707,
        857,
        819,
        490,
        512,
        295,
        264,
        661,
        2654,
        51368
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18537659242928747,
      "compression_ratio": 1.780373831775701,
      "no_speech_prob": 0.007449316326528788
    },
    {
      "id": 70,
      "seek": 41376,
      "start": 433.84,
      "end": 439.03999999999996,
      "text": " search problems that we looked at so for example traveling salesman problem",
      "tokens": [
        51368,
        3164,
        2740,
        300,
        321,
        2956,
        412,
        370,
        337,
        1365,
        9712,
        5763,
        1601,
        1154,
        51628
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18537659242928747,
      "compression_ratio": 1.780373831775701,
      "no_speech_prob": 0.007449316326528788
    },
    {
      "id": 71,
      "seek": 43904,
      "start": 439.6,
      "end": 445.68,
      "text": " you do not know if there still is a better solution until you really explored",
      "tokens": [
        50392,
        291,
        360,
        406,
        458,
        498,
        456,
        920,
        307,
        257,
        1101,
        3827,
        1826,
        291,
        534,
        24016,
        50696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13181381447370663,
      "compression_ratio": 1.813397129186603,
      "no_speech_prob": 0.005969105288386345
    },
    {
      "id": 72,
      "seek": 43904,
      "start": 445.68,
      "end": 451.20000000000005,
      "text": " everything here if you find a solution where the fitness equals the number of",
      "tokens": [
        50696,
        1203,
        510,
        498,
        291,
        915,
        257,
        3827,
        689,
        264,
        15303,
        6915,
        264,
        1230,
        295,
        50972
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13181381447370663,
      "compression_ratio": 1.813397129186603,
      "no_speech_prob": 0.005969105288386345
    },
    {
      "id": 73,
      "seek": 43904,
      "start": 451.20000000000005,
      "end": 455.28000000000003,
      "text": " constraints you know that you found an optimal solution there might be more",
      "tokens": [
        50972,
        18491,
        291,
        458,
        300,
        291,
        1352,
        364,
        16252,
        3827,
        456,
        1062,
        312,
        544,
        51176
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13181381447370663,
      "compression_ratio": 1.813397129186603,
      "no_speech_prob": 0.005969105288386345
    },
    {
      "id": 74,
      "seek": 43904,
      "start": 455.28000000000003,
      "end": 460.08000000000004,
      "text": " optimal solutions but none of them is better in any way so here we know that we",
      "tokens": [
        51176,
        16252,
        6547,
        457,
        6022,
        295,
        552,
        307,
        1101,
        294,
        604,
        636,
        370,
        510,
        321,
        458,
        300,
        321,
        51416
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13181381447370663,
      "compression_ratio": 1.813397129186603,
      "no_speech_prob": 0.005969105288386345
    },
    {
      "id": 75,
      "seek": 43904,
      "start": 460.08000000000004,
      "end": 466.72,
      "text": " have that we stuck in a local optimum and what does it tell us last",
      "tokens": [
        51416,
        362,
        300,
        321,
        5541,
        294,
        257,
        2654,
        39326,
        293,
        437,
        775,
        309,
        980,
        505,
        1036,
        51748
      ],
      "temperature": 0.0,
      "avg_logprob": -0.13181381447370663,
      "compression_ratio": 1.813397129186603,
      "no_speech_prob": 0.005969105288386345
    },
    {
      "id": 76,
      "seek": 46672,
      "start": 466.72,
      "end": 470.40000000000003,
      "text": " chance to stop the video to think about it",
      "tokens": [
        50364,
        2931,
        281,
        1590,
        264,
        960,
        281,
        519,
        466,
        309,
        50548
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17666458439182592,
      "compression_ratio": 1.8959537572254335,
      "no_speech_prob": 0.0009754507918842137
    },
    {
      "id": 77,
      "seek": 46672,
      "start": 474.0,
      "end": 479.52000000000004,
      "text": " okay for a globally optimal solution we know that by the definition or the",
      "tokens": [
        50728,
        1392,
        337,
        257,
        18958,
        16252,
        3827,
        321,
        458,
        300,
        538,
        264,
        7123,
        420,
        264,
        51004
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17666458439182592,
      "compression_ratio": 1.8959537572254335,
      "no_speech_prob": 0.0009754507918842137
    },
    {
      "id": 78,
      "seek": 46672,
      "start": 479.52000000000004,
      "end": 482.8,
      "text": " constraints are satisfied and we found a solution and we know this CSB is",
      "tokens": [
        51004,
        18491,
        366,
        11239,
        293,
        321,
        1352,
        257,
        3827,
        293,
        321,
        458,
        341,
        9460,
        33,
        307,
        51168
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17666458439182592,
      "compression_ratio": 1.8959537572254335,
      "no_speech_prob": 0.0009754507918842137
    },
    {
      "id": 79,
      "seek": 46672,
      "start": 482.8,
      "end": 487.36,
      "text": " consistent because we have found a solution and therefore it is",
      "tokens": [
        51168,
        8398,
        570,
        321,
        362,
        1352,
        257,
        3827,
        293,
        4412,
        309,
        307,
        51396
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17666458439182592,
      "compression_ratio": 1.8959537572254335,
      "no_speech_prob": 0.0009754507918842137
    },
    {
      "id": 80,
      "seek": 46672,
      "start": 487.36,
      "end": 492.40000000000003,
      "text": " consistent if we have an only locally optimal solution we know that some",
      "tokens": [
        51396,
        8398,
        498,
        321,
        362,
        364,
        787,
        16143,
        16252,
        3827,
        321,
        458,
        300,
        512,
        51648
      ],
      "temperature": 0.0,
      "avg_logprob": -0.17666458439182592,
      "compression_ratio": 1.8959537572254335,
      "no_speech_prob": 0.0009754507918842137
    },
    {
      "id": 81,
      "seek": 49240,
      "start": 492.4,
      "end": 498.96,
      "text": " constraints are violated but we do not know if there is a better",
      "tokens": [
        50364,
        18491,
        366,
        33239,
        457,
        321,
        360,
        406,
        458,
        498,
        456,
        307,
        257,
        1101,
        50692
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15688202597878195,
      "compression_ratio": 1.68,
      "no_speech_prob": 0.0005372236482799053
    },
    {
      "id": 82,
      "seek": 49240,
      "start": 498.96,
      "end": 505.28,
      "text": " solution so the CSB might be inconsistent but that might also the case that we",
      "tokens": [
        50692,
        3827,
        370,
        264,
        9460,
        33,
        1062,
        312,
        36891,
        457,
        300,
        1062,
        611,
        264,
        1389,
        300,
        321,
        51008
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15688202597878195,
      "compression_ratio": 1.68,
      "no_speech_prob": 0.0005372236482799053
    },
    {
      "id": 83,
      "seek": 49240,
      "start": 505.28,
      "end": 510.08,
      "text": " just stuck into some kind of local optimum and the next valley",
      "tokens": [
        51008,
        445,
        5541,
        666,
        512,
        733,
        295,
        2654,
        39326,
        293,
        264,
        958,
        17636,
        51248
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15688202597878195,
      "compression_ratio": 1.68,
      "no_speech_prob": 0.0005372236482799053
    },
    {
      "id": 84,
      "seek": 49240,
      "start": 510.08,
      "end": 514.56,
      "text": " already will lead us to a globally optimal solution",
      "tokens": [
        51248,
        1217,
        486,
        1477,
        505,
        281,
        257,
        18958,
        16252,
        3827,
        51472
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15688202597878195,
      "compression_ratio": 1.68,
      "no_speech_prob": 0.0005372236482799053
    },
    {
      "id": 85,
      "seek": 49240,
      "start": 514.56,
      "end": 518.48,
      "text": " and therefore we just cannot conclude anything in this case we do not know if",
      "tokens": [
        51472,
        293,
        4412,
        321,
        445,
        2644,
        16886,
        1340,
        294,
        341,
        1389,
        321,
        360,
        406,
        458,
        498,
        51668
      ],
      "temperature": 0.0,
      "avg_logprob": -0.15688202597878195,
      "compression_ratio": 1.68,
      "no_speech_prob": 0.0005372236482799053
    },
    {
      "id": 86,
      "seek": 51848,
      "start": 518.48,
      "end": 523.2,
      "text": " there is a better solution if there is a solution at all but of course",
      "tokens": [
        50364,
        456,
        307,
        257,
        1101,
        3827,
        498,
        456,
        307,
        257,
        3827,
        412,
        439,
        457,
        295,
        1164,
        50600
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1489731837541629,
      "compression_ratio": 1.8469945355191257,
      "no_speech_prob": 0.003178574610501528
    },
    {
      "id": 87,
      "seek": 51848,
      "start": 523.2,
      "end": 528.8000000000001,
      "text": " we might say okay a solution that only violates two constraints or so",
      "tokens": [
        50600,
        321,
        1062,
        584,
        1392,
        257,
        3827,
        300,
        787,
        3448,
        1024,
        732,
        18491,
        420,
        370,
        50880
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1489731837541629,
      "compression_ratio": 1.8469945355191257,
      "no_speech_prob": 0.003178574610501528
    },
    {
      "id": 88,
      "seek": 51848,
      "start": 528.8000000000001,
      "end": 532.96,
      "text": " is already good enough for us this is then often called soft constraints or",
      "tokens": [
        50880,
        307,
        1217,
        665,
        1547,
        337,
        505,
        341,
        307,
        550,
        2049,
        1219,
        2787,
        18491,
        420,
        51088
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1489731837541629,
      "compression_ratio": 1.8469945355191257,
      "no_speech_prob": 0.003178574610501528
    },
    {
      "id": 89,
      "seek": 51848,
      "start": 532.96,
      "end": 537.84,
      "text": " soft constraint problem solving and again this is not possible for",
      "tokens": [
        51088,
        2787,
        25534,
        1154,
        12606,
        293,
        797,
        341,
        307,
        406,
        1944,
        337,
        51332
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1489731837541629,
      "compression_ratio": 1.8469945355191257,
      "no_speech_prob": 0.003178574610501528
    },
    {
      "id": 90,
      "seek": 51848,
      "start": 537.84,
      "end": 546.5600000000001,
      "text": " backtracking search but it is true again here you have",
      "tokens": [
        51332,
        646,
        6903,
        14134,
        3164,
        457,
        309,
        307,
        2074,
        797,
        510,
        291,
        362,
        51768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.1489731837541629,
      "compression_ratio": 1.8469945355191257,
      "no_speech_prob": 0.003178574610501528
    },
    {
      "id": 91,
      "seek": 54656,
      "start": 546.64,
      "end": 552.0,
      "text": " to search the entire search space to be sure that there is no better solution",
      "tokens": [
        50368,
        281,
        3164,
        264,
        2302,
        3164,
        1901,
        281,
        312,
        988,
        300,
        456,
        307,
        572,
        1101,
        3827,
        50636
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10069453197976817,
      "compression_ratio": 1.837837837837838,
      "no_speech_prob": 0.004593945574015379
    },
    {
      "id": 92,
      "seek": 54656,
      "start": 552.0,
      "end": 559.52,
      "text": " but applying the consistency definitions and algorithms that",
      "tokens": [
        50636,
        457,
        9275,
        264,
        14416,
        21988,
        293,
        14642,
        300,
        51012
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10069453197976817,
      "compression_ratio": 1.837837837837838,
      "no_speech_prob": 0.004593945574015379
    },
    {
      "id": 93,
      "seek": 54656,
      "start": 559.52,
      "end": 564.88,
      "text": " establish consistency in the way that we looked at today can make this problem",
      "tokens": [
        51012,
        8327,
        14416,
        294,
        264,
        636,
        300,
        321,
        2956,
        412,
        965,
        393,
        652,
        341,
        1154,
        51280
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10069453197976817,
      "compression_ratio": 1.837837837837838,
      "no_speech_prob": 0.004593945574015379
    },
    {
      "id": 94,
      "seek": 54656,
      "start": 564.88,
      "end": 570.56,
      "text": " easier so if we want to combine consistency",
      "tokens": [
        51280,
        3571,
        370,
        498,
        321,
        528,
        281,
        10432,
        14416,
        51564
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10069453197976817,
      "compression_ratio": 1.837837837837838,
      "no_speech_prob": 0.004593945574015379
    },
    {
      "id": 95,
      "seek": 54656,
      "start": 570.56,
      "end": 576.4799999999999,
      "text": " establishing algorithms and local search we could stick to this procedure here",
      "tokens": [
        51564,
        22494,
        14642,
        293,
        2654,
        3164,
        321,
        727,
        2897,
        281,
        341,
        10747,
        510,
        51860
      ],
      "temperature": 0.0,
      "avg_logprob": -0.10069453197976817,
      "compression_ratio": 1.837837837837838,
      "no_speech_prob": 0.004593945574015379
    },
    {
      "id": 96,
      "seek": 57648,
      "start": 576.48,
      "end": 580.72,
      "text": " we can say okay we have our constraints at a section problem we do this kind of",
      "tokens": [
        50364,
        321,
        393,
        584,
        1392,
        321,
        362,
        527,
        18491,
        412,
        257,
        3541,
        1154,
        321,
        360,
        341,
        733,
        295,
        50576
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 97,
      "seek": 57648,
      "start": 580.72,
      "end": 584.0,
      "text": " constraint propagation making CSP locally consistent",
      "tokens": [
        50576,
        25534,
        38377,
        1455,
        9460,
        47,
        16143,
        8398,
        50740
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 98,
      "seek": 57648,
      "start": 584.0,
      "end": 589.2,
      "text": " node consistent our consistent perhaps even more",
      "tokens": [
        50740,
        9984,
        8398,
        527,
        8398,
        4317,
        754,
        544,
        51000
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 99,
      "seek": 57648,
      "start": 589.2,
      "end": 593.44,
      "text": " we might find it already inconsistent then then we're done with can say okay",
      "tokens": [
        51000,
        321,
        1062,
        915,
        309,
        1217,
        36891,
        550,
        550,
        321,
        434,
        1096,
        365,
        393,
        584,
        1392,
        51212
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 100,
      "seek": 57648,
      "start": 593.44,
      "end": 598.08,
      "text": " there is not a solution but perhaps we say okay we know it's inconsistent",
      "tokens": [
        51212,
        456,
        307,
        406,
        257,
        3827,
        457,
        4317,
        321,
        584,
        1392,
        321,
        458,
        309,
        311,
        36891,
        51444
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 101,
      "seek": 57648,
      "start": 598.08,
      "end": 602.32,
      "text": " but still we want to find a good solution",
      "tokens": [
        51444,
        457,
        920,
        321,
        528,
        281,
        915,
        257,
        665,
        3827,
        51656
      ],
      "temperature": 0.0,
      "avg_logprob": -0.170174621400379,
      "compression_ratio": 1.8606965174129353,
      "no_speech_prob": 0.0008820790098980069
    },
    {
      "id": 102,
      "seek": 60232,
      "start": 602.32,
      "end": 606.96,
      "text": " so we could perform local search then but we would still of course benefit",
      "tokens": [
        50364,
        370,
        321,
        727,
        2042,
        2654,
        3164,
        550,
        457,
        321,
        576,
        920,
        295,
        1164,
        5121,
        50596
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18517585649882276,
      "compression_ratio": 1.7736842105263158,
      "no_speech_prob": 0.0023660853039473295
    },
    {
      "id": 103,
      "seek": 60232,
      "start": 606.96,
      "end": 610.6400000000001,
      "text": " from the outcome of making it node and are consistent",
      "tokens": [
        50596,
        490,
        264,
        9700,
        295,
        1455,
        309,
        9984,
        293,
        366,
        8398,
        50780
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18517585649882276,
      "compression_ratio": 1.7736842105263158,
      "no_speech_prob": 0.0023660853039473295
    },
    {
      "id": 104,
      "seek": 60232,
      "start": 610.6400000000001,
      "end": 617.84,
      "text": " because these algorithms reduce the size of the domains and therefore",
      "tokens": [
        50780,
        570,
        613,
        14642,
        5407,
        264,
        2744,
        295,
        264,
        25514,
        293,
        4412,
        51140
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18517585649882276,
      "compression_ratio": 1.7736842105263158,
      "no_speech_prob": 0.0023660853039473295
    },
    {
      "id": 105,
      "seek": 60232,
      "start": 617.84,
      "end": 623.9200000000001,
      "text": " our local search algorithms will not run into dead ends will omit perhaps some",
      "tokens": [
        51140,
        527,
        2654,
        3164,
        14642,
        486,
        406,
        1190,
        666,
        3116,
        5314,
        486,
        3406,
        270,
        4317,
        512,
        51444
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18517585649882276,
      "compression_ratio": 1.7736842105263158,
      "no_speech_prob": 0.0023660853039473295
    },
    {
      "id": 106,
      "seek": 60232,
      "start": 623.9200000000001,
      "end": 628.96,
      "text": " local optimal and so on so the search space becomes smaller",
      "tokens": [
        51444,
        2654,
        16252,
        293,
        370,
        322,
        370,
        264,
        3164,
        1901,
        3643,
        4356,
        51696
      ],
      "temperature": 0.0,
      "avg_logprob": -0.18517585649882276,
      "compression_ratio": 1.7736842105263158,
      "no_speech_prob": 0.0023660853039473295
    },
    {
      "id": 107,
      "seek": 62896,
      "start": 628.96,
      "end": 636.0,
      "text": " and then in the end we can say okay we we found an optimal solution",
      "tokens": [
        50364,
        293,
        550,
        294,
        264,
        917,
        321,
        393,
        584,
        1392,
        321,
        321,
        1352,
        364,
        16252,
        3827,
        50716
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11541557312011719,
      "compression_ratio": 1.705521472392638,
      "no_speech_prob": 0.0013039270415902138
    },
    {
      "id": 108,
      "seek": 62896,
      "start": 636.0,
      "end": 644.96,
      "text": " or not if not we might have found a suboptimal solution which still is okay for us",
      "tokens": [
        50716,
        420,
        406,
        498,
        406,
        321,
        1062,
        362,
        1352,
        257,
        1422,
        5747,
        10650,
        3827,
        597,
        920,
        307,
        1392,
        337,
        505,
        51164
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11541557312011719,
      "compression_ratio": 1.705521472392638,
      "no_speech_prob": 0.0013039270415902138
    },
    {
      "id": 109,
      "seek": 62896,
      "start": 644.96,
      "end": 648.96,
      "text": " but we would not know if there is a better solution",
      "tokens": [
        51164,
        457,
        321,
        576,
        406,
        458,
        498,
        456,
        307,
        257,
        1101,
        3827,
        51364
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11541557312011719,
      "compression_ratio": 1.705521472392638,
      "no_speech_prob": 0.0013039270415902138
    },
    {
      "id": 110,
      "seek": 62896,
      "start": 648.96,
      "end": 657.0400000000001,
      "text": " okay good last next and last section will be summary of today's content and",
      "tokens": [
        51364,
        1392,
        665,
        1036,
        958,
        293,
        1036,
        3541,
        486,
        312,
        12691,
        295,
        965,
        311,
        2701,
        293,
        51768
      ],
      "temperature": 0.0,
      "avg_logprob": -0.11541557312011719,
      "compression_ratio": 1.705521472392638,
      "no_speech_prob": 0.0013039270415902138
    },
    {
      "id": 111,
      "seek": 65704,
      "start": 657.04,
      "end": 661.04,
      "text": " that's it for local search",
      "tokens": [
        50368,
        300,
        311,
        309,
        337,
        2654,
        3164,
        50564
      ],
      "temperature": 0.0,
      "avg_logprob": -0.5168543391757541,
      "compression_ratio": 0.7647058823529411,
      "no_speech_prob": 0.014532509259879589
    }
  ],
  "language": "en"
}